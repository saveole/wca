/**
 * Mock Response Data for UI Testing
 *
 * Provides comprehensive mock data for testing API responses, accessibility violations,
 * test results, and various edge cases. All data is structured to match real-world
 * scenarios and support thorough testing of Chrome extension functionality.
 *
 * Features:
 * - API response mock data (OpenAI, Notion, Custom APIs)
 * - Accessibility violation scenarios (axe-core format)
 * - Test result data for different test types
 * - Performance benchmark data
 * - Error and edge case scenarios
 * - Theme and configuration testing data
 */

const mockResponses = {
  /**
   * API Response Mock Data
   */
  api: {
    /**
     * OpenAI API Responses
     */
    openai: {
      success: {
        id: 'chatcmpl-123456789',
        object: 'chat.completion',
        created: 1640995200,
        model: 'gpt-4',
        choices: [
          {
            index: 0,
            message: {
              role: 'assistant',
              content: 'This is a comprehensive AI-generated summary of the web page content. The summary captures the key points, main arguments, and important insights from the original article while maintaining readability and providing value to users who want to understand the content quickly.'
            },
            finish_reason: 'stop'
          }
        ],
        usage: {
          prompt_tokens: 450,
          completion_tokens: 80,
          total_tokens: 530
        }
      },
      error: {
        error: {
          message: 'Invalid API key provided',
          type: 'invalid_request_error',
          param: null,
          code: 'invalid_api_key'
        }
      },
      rateLimit: {
        error: {
          message: 'Rate limit exceeded. Please try again later.',
          type: 'rate_limit_error',
          param: null,
          code: 'rate_limit_exceeded'
        }
      }
    },

    /**
     * Anthropic/Claude API Responses
     */
    anthropic: {
      success: {
        id: 'msg_123456789',
        type: 'message',
        role: 'assistant',
        content: [
          {
            type: 'text',
            text: 'This is a well-structured summary generated by Claude AI. It provides a comprehensive overview of the main topics discussed in the article, highlights key insights, and maintains the original context while making the information more digestible for quick consumption.'
          }
        ],
        model: 'claude-3-sonnet-20240229',
        stop_reason: 'end_turn',
        usage: {
          input_tokens: 420,
          output_tokens: 95
        }
      },
      error: {
        error: {
          type: 'authentication_error',
          message: 'Invalid API token'
        }
      }
    },

    /**
     * Notion API Responses
     */
    notion: {
      // Database query response
      databaseQuery: {
        results: [
          {
            id: 'page-123',
            properties: {
              'Name': {
                title: [
                  {
                    text: {
                      content: 'Test Page Title'
                    }
                  }
                ]
              },
              'URL': {
                url: 'https://example.com/test-page'
              },
              'Description': {
                rich_text: [
                  {
                    text: {
                      content: 'Test description for database entry'
                    }
                  }
                ]
              },
              'Created': {
                date: {
                  start: '2024-01-01T12:00:00.000Z'
                }
              }
            }
          }
        ],
        next_cursor: null,
            has_more: false
      },

      // Page creation response
      pageCreate: {
        id: 'new-page-123',
        object: 'page',
        created_time: '2024-01-01T12:00:00.000Z',
        last_edited_time: '2024-01-01T12:00:00.000Z',
        properties: {
          'Name': {
            title: [
              {
                text: {
                  content: 'New WebClip Entry'
                }
              }
            ]
          }
        }
      },

      // User response
      user: {
        object: 'user',
        id: 'user-123',
        name: 'Test User',
        avatar_url: 'https://example.com/avatar.jpg',
        type: 'person',
        person: {
          email: 'test@example.com'
        }
      },

      // Database response
      database: {
        id: 'database-123',
        title: [
          {
            type: 'text',
            text: {
              content: 'WebClips'
            }
          }
        ],
        properties: {
          'Name': { title: {} },
          'URL': { url: {} },
          'Description': { rich_text: {} },
          'AI Summary': { rich_text: {} },
          'Notes': { rich_text: {} },
          'Tags': { multi_select: {} },
          'Created': { date: {} }
        }
      },

      // Error responses
      errors: {
        unauthorized: {
          code: 'unauthorized',
          message: 'API token is invalid.'
        },
        databaseNotFound: {
          code: 'object_not_found',
          message: 'Could not find database with ID: 12345678-1234-1234-1234-123456789abc'
        },
        validation: {
          code: 'validation_error',
          message: 'Body validation error'
        }
      }
    },

    /**
     * Chrome Storage API Responses
     */
    chromeStorage: {
      // Settings data
      settings: {
        aiProvider: 'openai',
        apiKey: 'sk-test-key',
        apiEndpoint: 'https://api.openai.com/v1',
        model: 'gpt-4',
        notionToken: 'secret-test-token',
        databaseId: '12345678-1234-1234-1234-123456789abc',
        theme: 'light',
        fieldMapping: {
          title: 'Name',
          url: 'URL',
          description: 'Description',
          summary: 'AI Summary',
          notes: 'Notes',
          tags: 'Tags',
          createDate: 'Created'
        }
      },

      // Clips data
      clips: [
        {
          id: 'clip-1',
          title: 'Sample Clip 1',
          url: 'https://example.com/1',
          description: 'Description for sample clip 1',
          summary: 'AI-generated summary for sample clip 1',
          notes: 'Personal notes for sample clip 1',
          tags: ['testing', 'sample'],
          created: '2024-01-01T12:00:00.000Z'
        },
        {
          id: 'clip-2',
          title: 'Sample Clip 2',
          url: 'https://example.com/2',
          description: 'Description for sample clip 2',
          summary: 'AI-generated summary for sample clip 2',
          notes: 'Personal notes for sample clip 2',
          tags: ['testing', 'example'],
          created: '2024-01-02T12:00:00.000Z'
        }
      ]
    }
  },

  /**
   * Accessibility Test Mock Data (axe-core format)
   */
  accessibility: {
    /**
     * No violations (clean page)
     */
    cleanPage: {
      violations: [],
      passes: [
        {
          id: 'color-contrast',
          impact: null,
          tags: ['cat.color', 'wcag2aa', 'wcag143'],
          description: 'Elements must have sufficient color contrast',
          nodes: []
        }
      ],
      incomplete: [],
      inapplicable: []
    },

    /**
     * Common accessibility violations
     */
    commonViolations: {
      violations: [
        {
          id: 'color-contrast',
          impact: 'serious',
          tags: ['cat.color', 'wcag2aa', 'wcag143'],
          description: 'Elements must have sufficient color contrast',
          help: 'Elements must have sufficient color contrast',
          helpUrl: 'https://dequeuniversity.com/rules/axe/4.4/color-contrast',
          nodes: [
            {
              any: [
                {
                  id: 'color-contrast',
                  data: {
                    fgColor: '#ffffff',
                    bgColor: '#f0f0f0',
                    contrastRatio: 1.1,
                    fontSize: '14px',
                    fontWeight: 'normal'
                  },
                  relatedNodes: [
                    {
                      html: '<body class="light-theme">...</body>',
                      target: ['body']
                    }
                  ]
                }
              ],
              all: [],
              none: [],
              impact: 'serious',
              html: '<button class="btn">Click me</button>',
              target: ['button.btn'],
              failureSummary: 'Fix any of the following:\n  Element has insufficient color contrast of 1.1 (foreground color: #ffffff, background color: #f0f0f0, font size: 14px, font weight: normal). Expected contrast ratio of 4.5:1'
            }
          ]
        },
        {
          id: 'label-content',
          impact: 'moderate',
          tags: ['cat.forms', 'wcag2aa', 'wcag332'],
          description: 'Form elements should have labels',
          help: 'Form elements should have labels',
          helpUrl: 'https://dequeuniversity.com/rules/axe/4.4/label-content',
          nodes: [
            {
              any: [],
              all: [
                {
                  id: 'label-content',
                  data: null,
                  relatedNodes: []
                }
              ],
              none: [],
              impact: 'moderate',
              html: '<input type="text" id="username">',
              target: ['input#username'],
              failureSummary: 'Fix any of the following:\n  Form element does not have a label'
            }
          ]
        },
        {
          id: 'focusable-content',
          impact: 'serious',
          tags: ['cat.keyboard', 'wcag2a', 'wcag211'],
          description: 'Focusable content must be focusable',
          help: 'Focusable content must be focusable',
          helpUrl: 'https://dequeuniversity.com/rules/axe/4.4/focusable-content',
          nodes: [
            {
              any: [],
              all: [],
              none: [
                {
                  id: 'focusable-content',
                  data: null,
                  relatedNodes: []
                }
              ],
              impact: 'serious',
              html: '<div tabindex="-1">Non-focusable element</div>',
              target: ['div[tabindex="-1"]'],
              failureSummary: 'Fix any of the following:\n  Element has a negative tabindex value'
            }
          ]
        }
      ],
      passes: [
        {
          id: 'html-has-lang',
          impact: null,
          tags: ['cat.language', 'wcag2aa', 'wcag311'],
          description: '<html> element must have a lang attribute',
          help: '<html> element must have a lang attribute',
          nodes: []
        }
      ],
      incomplete: [],
      inapplicable: []
    },

    /**
     * Critical accessibility violations
     */
    criticalViolations: {
      violations: [
        {
          id: 'page-title',
          impact: 'critical',
          tags: ['cat.semantics', 'wcag2aa', 'wcag242'],
          description: 'Document must have a title',
          help: 'Document must have a title',
          helpUrl: 'https://dequeuniversity.com/rules/axe/4.4/page-title',
          nodes: [
            {
              any: [],
              all: [],
              none: [
                {
                  id: 'page-title',
                  data: null,
                  relatedNodes: []
                }
              ],
              impact: 'critical',
              html: '<head>\n  <meta charset="UTF-8">\n  <title> </title>\n</head>',
              target: ['title'],
              failureSummary: 'Fix any of the following:\n  Document title is empty'
            }
          ]
        },
        {
          id: 'duplicate-id',
          impact: 'serious',
          tags: ['cat.semantics', 'wcag2a', 'wcag411'],
          description: 'IDs must be unique',
          help: 'IDs must be unique',
          helpUrl: 'https://dequeuniversity.com/rules/axe/4.4/duplicate-id',
          nodes: [
            {
              any: [],
              all: [],
              none: [
                {
                  id: 'duplicate-id',
                  data: {
                    duplicateIds: ['submit-button', 'submit-button']
                  },
                  relatedNodes: [
                    {
                      html: '<button id="submit-button">Submit</button>',
                      target: ['button#submit-button:nth-of-type(1)']
                    },
                    {
                      html: '<button id="submit-button">Cancel</button>',
                      target: ['button#submit-button:nth-of-type(2)']
                    }
                  ]
                }
              ],
              impact: 'serious',
              html: '<button id="submit-button">Submit</button>',
              target: ['button#submit-button:nth-of-type(1)'],
              failureSummary: 'Fix any of the following:\n  Document has multiple elements with ID: submit-button'
            }
          ]
        }
      ],
      passes: [],
      incomplete: [],
      inapplicable: []
    },

    /**
     * Specific component violations
     */
    componentViolations: {
      button: {
        violations: [
          {
            id: 'button-name',
            impact: 'critical',
            tags: ['cat.name-role-value', 'wcag2a', 'wcag412'],
            description: 'Buttons must have discernible text',
            help: 'Buttons must have discernible text',
            nodes: [
              {
                any: [],
                all: [],
                none: [
                  {
                    id: 'button-name',
                    data: null,
                    relatedNodes: []
                  }
                ],
                impact: 'critical',
                html: '<button class="icon-btn"></button>',
                target: ['button.icon-btn'],
                failureSummary: 'Fix any of the following:\n  Element does not have text that is visible to screen readers'
              }
            ]
          }
        ]
      },

      form: {
        violations: [
          {
            id: 'form-field-multiple-labels',
            impact: 'serious',
            tags: ['cat.forms', 'wcag2aa', 'wcag332'],
            description: 'Form field should not have multiple labels',
            help: 'Form field should not have multiple labels',
            nodes: [
              {
                any: [],
                all: [],
                none: [
                  {
                    id: 'form-field-multiple-labels',
                    data: {
                      labels: 2
                    },
                    relatedNodes: [
                      {
                        html: '<label for="email">Email</label>',
                        target: ['label[for="email"]']
                      },
                      {
                        html: '<label for="email">Email Address</label>',
                        target: ['label[for="email"]']
                      }
                    ]
                  },
                  impact: 'serious',
                  html: '<input type="email" id="email">',
                  target: ['input#email'],
                  failureSummary: 'Fix any of the following:\n  Form field has multiple labels associated with it'
                }
              }
            ]
          }
        ]
      },

      image: {
        violations: [
          {
            id: 'image-alt',
            impact: 'critical',
            tags: ['cat.text-alternatives', 'wcag2a', 'wcag111'],
            description: 'Images must have alternate text',
            help: 'Images must have alternate text',
            nodes: [
              {
                any: [],
                all: [],
                none: [
                  {
                    id: 'image-alt',
                    data: null,
                    relatedNodes: []
                  }
                ],
                impact: 'critical',
                html: '<img src="logo.png">',
                target: ['img'],
                failureSummary: 'Fix any of the following:\n  Element does not have an alt attribute'
              }
            ]
          }
        ]
      }
    }
  },

  /**
   * Test Results Mock Data
   */
  testResults: {
    /**
     * Visual regression test results
     */
    visual: {
      success: {
        id: 'visual-test-001',
        type: 'visual',
        component: 'popup',
        viewport: '360x600',
        theme: 'light',
        timestamp: Date.now(),
        result: {
          success: true,
          differences: 0,
          baselineMatch: true,
          executionTime: 1250,
          screenshotTime: 210,
          comparisonTime: 95,
          pixelDifference: 0.0,
          threshold: 0.1
        }
      },

      failure: {
        id: 'visual-test-002',
        type: 'visual',
        component: 'popup',
        viewport: '360x600',
        theme: 'light',
        timestamp: Date.now(),
        result: {
          success: false,
          differences: 15,
          baselineMatch: false,
          executionTime: 1380,
          screenshotTime: 225,
          comparisonTime: 120,
          pixelDifference: 0.23,
          threshold: 0.1,
          diffImage: '/tmp/diff-visual-test-002.png'
        }
      },

      baselineNotFound: {
        id: 'visual-test-003',
        type: 'visual',
        component: 'popup',
        viewport: '360x600',
        theme: 'dark',
        timestamp: Date.now(),
        result: {
          success: false,
          error: 'Baseline image not found: /baselines/popup-dark-360x600.png',
          executionTime: 450,
          screenshotTime: 200,
          comparisonTime: 0
        }
      }
    },

    /**
     * Accessibility test results
     */
    accessibility: {
      success: {
        id: 'a11y-test-001',
        type: 'accessibility',
        url: 'popup.html',
        timestamp: Date.now(),
        result: {
          success: true,
          violations: [],
          violationCount: 0,
          criticalViolations: 0,
          seriousViolations: 0,
          moderateViolations: 0,
          minorViolations: 0,
          executionTime: 850,
          scanTime: 780,
          standards: ['WCAG 2.1 Level AA'],
          complianceScore: 100
        }
      },

      violationsFound: {
        id: 'a11y-test-002',
        type: 'accessibility',
        url: 'popup.html',
        timestamp: Date.now(),
        result: {
          success: false,
          violations: mockResponses.accessibility.commonViolations.violations,
          violationCount: 3,
          criticalViolations: 0,
          seriousViolations: 2,
          moderateViolations: 1,
          minorViolations: 0,
          executionTime: 920,
          scanTime: 850,
          standards: ['WCAG 2.1 Level AA'],
          complianceScore: 75
        }
      },

      criticalIssues: {
        id: 'a11y-test-003',
        type: 'accessibility',
        url: 'settings.html',
        timestamp: Date.now(),
        result: {
          success: false,
          violations: mockResponses.accessibility.criticalViolations.violations,
          violationCount: 2,
          criticalViolations: 1,
          seriousViolations: 1,
          moderateViolations: 0,
          minorViolations: 0,
          executionTime: 890,
          scanTime: 820,
          standards: ['WCAG 2.1 Level AA'],
          complianceScore: 45
        }
      }
    },

    /**
     * Interaction test results
     */
    interaction: {
      success: {
        id: 'interaction-test-001',
        type: 'interaction',
        feature: 'form-validation',
        timestamp: Date.now(),
        result: {
          success: true,
          interactions: [
            { id: 'click-submit', type: 'click', element: '#submit-btn', success: true, duration: 45 },
            { id: 'type-email', type: 'type', element: '#email', success: true, duration: 120 },
            { id: 'focus-input', type: 'focus', element: '#name', success: true, duration: 15 }
          ],
          interactionCount: 3,
          successfulInteractions: 3,
          successRate: 1.0,
          executionTime: 2450
        }
      },

      partialSuccess: {
        id: 'interaction-test-002',
        type: 'interaction',
        feature: 'theme-toggle',
        timestamp: Date.now(),
        result: {
          success: false,
          interactions: [
            { id: 'click-theme-toggle', type: 'click', element: '#theme-toggle', success: true, duration: 55 },
            { id: 'verify-theme-change', type: 'verify', element: 'body', success: false, duration: 200, error: 'Theme class not applied' }
          ],
          interactionCount: 2,
          successfulInteractions: 1,
          successRate: 0.5,
          executionTime: 1850
        }
      },

      timeout: {
        id: 'interaction-test-003',
        type: 'interaction',
        feature: 'loading-state',
        timestamp: Date.now(),
        result: {
          success: false,
          error: 'Element interaction timeout after 5000ms',
          interactions: [],
          interactionCount: 0,
          successfulInteractions: 0,
          successRate: 0.0,
          executionTime: 5050
        }
      }
    },

    /**
     * Performance test results
     */
    performance: {
      excellent: {
        id: 'perf-test-001',
        type: 'performance',
        metric: 'screenshot-capture',
        timestamp: Date.now(),
        result: {
          success: true,
          executionTime: 180,
          memoryUsage: 4521800,
          cpuUsage: 12.5,
          metrics: {
            screenshotTime: 175,
            memoryEfficiency: 'excellent',
            performanceScore: 95
          },
          withinThreshold: true,
          threshold: 500
        }
      },

      acceptable: {
        id: 'perf-test-002',
        type: 'performance',
        metric: 'accessibility-scan',
        timestamp: Date.now(),
        result: {
          success: true,
          executionTime: 950,
          memoryUsage: 8923400,
          cpuUsage: 28.3,
          metrics: {
            scanTime: 925,
            memoryEfficiency: 'good',
            performanceScore: 78
          },
          withinThreshold: true,
          threshold: 2000
        }
      },

      poor: {
        id: 'perf-test-003',
        type: 'performance',
        metric: 'interaction-test',
        timestamp: Date.now(),
        result: {
          success: false,
          executionTime: 5250,
          memoryUsage: 15423000,
          cpuUsage: 67.8,
          metrics: {
            interactionTime: 5120,
            memoryEfficiency: 'poor',
            performanceScore: 42
          },
          withinThreshold: false,
          threshold: 3000
        }
      }
    }
  },

  /**
   * Configuration and Settings Mock Data
   */
  configuration: {
    /**
     * Test configuration presets
     */
    presets: {
      development: {
        timeout: 10000,
        retries: 3,
        slowMo: 0,
        headless: false,
        viewport: '1280x720',
        theme: 'light',
        debug: true
      },

      production: {
        timeout: 5000,
        retries: 1,
        slowMo: 0,
        headless: true,
        viewport: '360x600',
        theme: 'light',
        debug: false
      },

      accessibility: {
        timeout: 15000,
        retries: 2,
        slowMo: 500,
        headless: false,
        viewport: '360x600',
        theme: 'light',
        debug: true,
        standards: ['WCAG 2.1 Level AA']
      },

      performance: {
        timeout: 8000,
        retries: 0,
        slowMo: 0,
        headless: true,
        viewport: '1280x720',
        theme: 'light',
        debug: false,
        metrics: ['time', 'memory', 'cpu']
      }
    },

    /**
     * Theme configurations
     */
    themes: {
      light: {
        name: 'light',
        colors: {
          primary: '#4f46e5',
          background: '#ffffff',
          text: '#111827',
          border: '#e5e7eb'
        },
        customProperties: {
          '--bg-primary': '#ffffff',
          '--text-primary': '#111827',
          '--border': '#e5e7eb'
        }
      },

      dark: {
        name: 'dark',
        colors: {
          primary: '#6366f1',
          background: '#111827',
          text: '#f9fafb',
          border: '#4b5563'
        },
        customProperties: {
          '--bg-primary': '#111827',
          '--text-primary': '#f9fafb',
          '--border': '#4b5563'
        }
      }
    },

    /**
     * Viewport configurations
     */
    viewports: {
      mobile: {
        name: 'Mobile',
        width: 360,
        height: 600,
        deviceScaleFactor: 2,
        isMobile: true,
        hasTouch: true
      },

      tablet: {
        name: 'Tablet',
        width: 768,
        height: 1024,
        deviceScaleFactor: 2,
        isMobile: true,
        hasTouch: true
      },

      desktop: {
        name: 'Desktop',
        width: 1280,
        height: 720,
        deviceScaleFactor: 1,
        isMobile: false,
        hasTouch: false
      }
    }
  },

  /**
   * Error Scenarios and Edge Cases
   */
  errors: {
    /**
     * Network errors
     */
    network: {
      timeout: {
        message: 'Request timeout after 30000ms',
        code: 'TIMEOUT',
        status: 408
      },
      connection: {
        message: 'Failed to connect to server',
        code: 'CONNECTION_ERROR',
        status: 0
      },
      dns: {
        message: 'DNS resolution failed',
        code: 'DNS_ERROR',
        status: 0
      }
    },

    /**
     * Chrome extension specific errors
     */
    extension: {
      permissions: {
        message: 'Extension does not have required permissions',
        code: 'PERMISSION_DENIED'
      },
      context: {
        message: 'Extension context invalidated',
        code: 'CONTEXT_INVALIDATED'
      },
      runtime: {
        message: 'Chrome runtime error',
        code: 'RUNTIME_ERROR'
      }
    },

    /**
     * Test execution errors
     */
    testing: {
      elementNotFound: {
        message: 'Element not found: #non-existent-element',
        code: 'ELEMENT_NOT_FOUND'
      },
      timeout: {
        message: 'Element interaction timeout after 5000ms',
        code: 'INTERACTION_TIMEOUT'
      },
      invalidSelector: {
        message: 'Invalid CSS selector: #invalid..selector',
        code: 'INVALID_SELECTOR'
      }
    }
  },

  /**
   * Utility functions for generating mock data
   */
  utils: {
    /**
     * Generate random test ID
     */
    generateTestId: (prefix = 'test') => {
      return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    },

    /**
     * Generate random timestamp
     */
    generateTimestamp: (offsetDays = 0) => {
      const date = new Date();
      date.setDate(date.getDate() + offsetDays);
      return date.toISOString();
    },

    /**
     * Generate mock accessibility violation
     */
    generateViolation: (options = {}) => {
      const defaults = {
        id: 'mock-violation',
        impact: 'moderate',
        description: 'Mock accessibility violation',
        help: 'Fix this violation',
        nodes: []
      };
      return { ...defaults, ...options };
    },

    /**
     * Generate mock test result
     */
    generateTestResult: (options = {}) => {
      const defaults = {
        success: true,
        executionTime: 1000,
        timestamp: Date.now()
      };
      return { ...defaults, ...options };
    },

    /**
     * Get mock response by type and scenario
     */
    getResponse: (type, scenario = 'success') => {
      const types = type.split('.');
      let data = mockResponses;

      for (const key of types) {
        if (data[key]) {
          data = data[key];
        } else {
          throw new Error(`Mock response not found: ${type}`);
        }
      }

      if (typeof data === 'object' && data[scenario]) {
        return data[scenario];
      }

      return data;
    },

    /**
     * Create custom mock response
     */
    createResponse: (template, overrides = {}) => {
      return {
        ...template,
        ...overrides,
        timestamp: overrides.timestamp || Date.now()
      };
    }
  }
};

module.exports = { mockResponses };